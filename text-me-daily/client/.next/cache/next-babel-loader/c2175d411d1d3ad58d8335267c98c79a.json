{"ast":null,"code":"var _jsxFileName = \"/Users/Doug/Library/Mobile Documents/com~apple~CloudDocs/Development/20200912-text-me-daily/text-me-daily/client/pages/dashboard.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Cookies } from 'react-cookie';\nimport useSWR from 'swr';\nimport axios from 'axios';\nimport Router from 'next/router'; // set up cookies\n\nexport default function Dashboard(ctx) {\n  const cookies = new Cookies();\n  const token = cookies.get('token');\n\n  const fetcherAuth = url => axios.get(url, {\n    headers: {\n      'Authorization': token\n    }\n  }).then(res => res.data);\n\n  const {\n    data,\n    error\n  } = useSWR(`${serverUrl}/api/ping`, fetcherAuth);\n\n  if (error) {\n    console.log(error.response.data.msg);\n    console.log(\"redirecting back to main page\");\n\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/'\n      });\n      ctx.res.end();\n    } else {\n      Router.push('/');\n    }\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 12\n      }\n    }, \"error loading. probably not authorized.\");\n  }\n\n  if (!data) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 12\n      }\n    }, \"loading...\");\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  }, \"secret page\"));\n}\nexport async function getStaticProps(ctx) {\n  return {\n    props: {\n      serverUrl: process.env.SERVER\n    }\n  };\n}","map":{"version":3,"sources":["/Users/Doug/Library/Mobile Documents/com~apple~CloudDocs/Development/20200912-text-me-daily/text-me-daily/client/pages/dashboard.js"],"names":["Cookies","useSWR","axios","Router","Dashboard","ctx","cookies","token","get","fetcherAuth","url","headers","then","res","data","error","serverUrl","console","log","response","msg","writeHead","Location","end","push","getStaticProps","props","process","env","SERVER"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACrC,QAAMC,OAAO,GAAG,IAAIN,OAAJ,EAAhB;AACA,QAAMO,KAAK,GAAGD,OAAO,CAACE,GAAR,CAAY,OAAZ,CAAd;;AACA,QAAMC,WAAW,GAAGC,GAAG,IAAIR,KAAK,CAACM,GAAN,CAAUE,GAAV,EAAe;AAAEC,IAAAA,OAAO,EAAE;AAAE,uBAAiBJ;AAAnB;AAAX,GAAf,EAAwDK,IAAxD,CAA6DC,GAAG,IAAIA,GAAG,CAACC,IAAxE,CAA3B;;AACA,QAAM;AAAEA,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBd,MAAM,CAAE,GAAEe,SAAU,WAAd,EAA0BP,WAA1B,CAA9B;;AAEA,MAAIM,KAAJ,EAAW;AACTE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,CAAeL,IAAf,CAAoBM,GAAhC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;;AACA,QAAIb,GAAG,CAACQ,GAAR,EAAa;AACXR,MAAAA,GAAG,CAACQ,GAAJ,CAAQQ,SAAR,CAAkB,GAAlB,EAAuB;AACrBC,QAAAA,QAAQ,EAAE;AADW,OAAvB;AAGAjB,MAAAA,GAAG,CAACQ,GAAJ,CAAQU,GAAR;AACD,KALD,MAKO;AACLpB,MAAAA,MAAM,CAACqB,IAAP,CAAY,GAAZ;AACD;;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAP;AACD;;AACD,MAAI,CAACV,IAAL,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAL,CADF;AAGD;AAED,OAAO,eAAeW,cAAf,CAA8BpB,GAA9B,EAAmC;AACxC,SAAO;AACLqB,IAAAA,KAAK,EAAE;AACLV,MAAAA,SAAS,EAAEW,OAAO,CAACC,GAAR,CAAYC;AADlB;AADF,GAAP;AAKD","sourcesContent":["import { Cookies } from 'react-cookie';\nimport useSWR from 'swr';\nimport axios from 'axios';\nimport Router from 'next/router';\n\n// set up cookies\n\nexport default function Dashboard(ctx) {\n  const cookies = new Cookies();\n  const token = cookies.get('token');\n  const fetcherAuth = url => axios.get(url, { headers: { 'Authorization': token } }).then(res => res.data);\n  const { data, error } = useSWR(`${serverUrl}/api/ping`, fetcherAuth);\n\n  if (error) {\n    console.log(error.response.data.msg);\n    console.log(\"redirecting back to main page\");\n    if (ctx.res) {\n      ctx.res.writeHead(302, {\n        Location: '/'\n      })\n      ctx.res.end()\n    } else {\n      Router.push('/')\n    }\n    return <div>error loading. probably not authorized.</div>\n  }\n  if (!data) {\n    return <div>loading...</div>\n  }\n\n  return (\n    <div><h2>secret page</h2></div>\n  )\n}\n\nexport async function getStaticProps(ctx) {\n  return {\n    props: {\n      serverUrl: process.env.SERVER\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}