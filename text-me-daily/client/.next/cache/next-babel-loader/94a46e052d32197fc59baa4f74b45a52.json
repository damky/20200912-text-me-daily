{"ast":null,"code":"var _jsxFileName = \"/Users/Doug/Library/Mobile Documents/com~apple~CloudDocs/Development/20200912-text-me-daily/text-me-daily/client/pages/dashboard.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Cookies } from 'react-cookie';\nimport { handleAuth } from '../components/utils/auth';\nimport useSWR from 'swr';\nimport axios from 'axios';\nimport Router from 'next/router'; // set up cookies\n\nexport default function Dashboard(ctx) {\n  const cookies = new Cookies();\n  const token = cookies.get('token');\n\n  const fetcherAuth = url => axios.get(url, {\n    headers: {\n      'Authorization': token\n    }\n  });\n\n  const {\n    data,\n    error\n  } = useSWR(`${process.env.SERVER}/api/ping`, fetcherAuth);\n\n  if (error) {\n    // Router.push('/');\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 12\n      }\n    }, \"error loading. probably not authorized.\", error);\n  }\n\n  if (!data) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }, \"loading...\");\n  }\n\n  return handleAuth(token) && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 26\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 31\n    }\n  }, \"secret page\"));\n}\nexport async function getInitialProps(ctx) {\n  // must validate jwt\n  // if jwt is invalid we redirect to home\n  return {\n    props: {\n      handleAuth: handleAuth(ctx)\n    }\n  };\n}","map":{"version":3,"sources":["/Users/Doug/Library/Mobile Documents/com~apple~CloudDocs/Development/20200912-text-me-daily/text-me-daily/client/pages/dashboard.js"],"names":["Cookies","handleAuth","useSWR","axios","Router","Dashboard","ctx","cookies","token","get","fetcherAuth","url","headers","data","error","process","env","SERVER","getInitialProps","props"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACrC,QAAMC,OAAO,GAAG,IAAIP,OAAJ,EAAhB;AACA,QAAMQ,KAAK,GAAGD,OAAO,CAACE,GAAR,CAAY,OAAZ,CAAd;;AACA,QAAMC,WAAW,GAAGC,GAAG,IAAIR,KAAK,CAACM,GAAN,CAAUE,GAAV,EAAe;AAAEC,IAAAA,OAAO,EAAE;AAAE,uBAAiBJ;AAAnB;AAAX,GAAf,CAA3B;;AACA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBZ,MAAM,CAAE,GAAEa,OAAO,CAACC,GAAR,CAAYC,MAAO,WAAvB,EAAmCP,WAAnC,CAA9B;;AAEA,MAAII,KAAJ,EAAW;AACT;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAA6CA,KAA7C,CAAP;AACD;;AACD,MAAI,CAACD,IAAL,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,SACEZ,UAAU,CAACO,KAAD,CAAV,IAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAL,CADvB;AAGD;AAED,OAAO,eAAeU,eAAf,CAA+BZ,GAA/B,EAAoC;AACzC;AACA;AACA,SAAO;AACLa,IAAAA,KAAK,EAAE;AACLlB,MAAAA,UAAU,EAAEA,UAAU,CAACK,GAAD;AADjB;AADF,GAAP;AAKD","sourcesContent":["import { Cookies } from 'react-cookie';\nimport { handleAuth } from '../components/utils/auth';\nimport useSWR from 'swr';\nimport axios from 'axios';\nimport Router from 'next/router';\n\n// set up cookies\n\nexport default function Dashboard(ctx) {\n  const cookies = new Cookies();\n  const token = cookies.get('token');\n  const fetcherAuth = url => axios.get(url, { headers: { 'Authorization': token } });\n  const { data, error } = useSWR(`${process.env.SERVER}/api/ping`, fetcherAuth);\n\n  if (error) {\n    // Router.push('/');\n    return <div>error loading. probably not authorized.{error}</div>\n  }\n  if (!data) {\n    return <div>loading...</div>\n  }\n\n  return (\n    handleAuth(token) && <div><h2>secret page</h2></div>\n  )\n}\n\nexport async function getInitialProps(ctx) {\n  // must validate jwt\n  // if jwt is invalid we redirect to home\n  return {\n    props: {\n      handleAuth: handleAuth(ctx)\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}